datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int      @id                   // Primary key, will match Pterodactyl user ID
  discord_id     String   @unique
  discord_email  String
  ptero_username String
  tokens         Int      @default(0)
  is_admin       Boolean  @default(false)
  created_at     DateTime @default(now())

  servers     Server[]
  ownedTeams  Team[]      @relation("OwnedTeams")
  teamMembers TeamMember[]

  @@map("users")
}

model Server {
  id           Int      @id
  uuid         String
  identifier   String
  name         String
  cpu          Int?
  memory       Int?
  disk         Int?
  ports        Int?
  databases    Int?
  backups      Int?
  user_id      Int
  plan         String?
  expires_at   DateTime?
  renewal_cost Int?
  team_id     Int?

  team        Team?     @relation(fields: [team_id], references: [id])
  owner       User      @relation(fields: [user_id], references: [id])

  @@map("servers")
}

model Egg {
  egg_id       Int    @id
  name         String
  nest         String
  docker_image String?
  startup      String?
  environment  String?

  @@map("eggs")
}

model Location {
  id   Int    @id
  name String

  @@map("locations")
}

model Team {
  id         Int      @id @default(autoincrement())
  name       String
  type       String
  owner_id   Int
  created_at DateTime @default(now())

  owner   User        @relation("OwnedTeams", fields: [owner_id], references: [id])
  members TeamMember[]
  servers Server[]

  @@map("teams")
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  team_id   Int
  user_id   Int
  can_edit  Boolean  @default(false)
  joined_at DateTime @default(now())

  team Team @relation(fields: [team_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  @@unique([team_id, user_id])
  @@map("team_members")

}

model Blacklist {
  id         Int     @id @default(autoincrement())
  discord_id String? @unique
  ip         String? @unique
}
